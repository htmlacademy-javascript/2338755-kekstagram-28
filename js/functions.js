//Функция для проверки длины строки. Она нам пригодится для валидации формы. Примеры использования функции:

// имя_функции('проверяемая строка', 20); // Результат: true - строка проходит по длине
// имя_функции('проверяемая строка', 18); // Результат: true - строка проходит по длине
// имя_функции('проверяемая строка', 10); // Результат: false — строка не проходит

const isGetString = (row, correctNumber) => row.length <= correctNumber ? 'Результат: true' : 'Результат: false';
isGetString();
// Функция для проверки, является ли строка палиндромом. Палиндром — это слово или фраза, которые одинаково читаются и слева направо и справа налево. Например:

// имя_функции('топот'); // Результат: true - строка является палиндромом
// имя_функции('ДовОд'); // Результат: true - несмотря на разный регистр, тоже палиндром
// имя_функции('Кекс');  // Результат: false - это не палиндром
// Если хотите усложнить задание, предусмотрите случай, когда в строке встречаются пробелы. Они не должны учитываться при проверке!

// имя_функции('Лёша на полке клопа нашёл '); // Результат: true - это палиндром

const isPalindrom = function (string) {
  const stringText = string.toLowerCase().replaceAll(' ', '');
  let stringReverse = '';
  for (let i = stringText.length - 1; i >= 0; i--) {
    stringReverse += stringText.at(i);
  }
  return stringText === stringReverse;
};
isPalindrom();
// *Функция, которая принимает строку, извлекает содержащиеся в ней цифры от 0 до 9 и возвращает их в виде целого положительного числа. Если в строке нет ни одной цифры, функция должна вернуть NaN:

// имя_функции('2023 год');            // Результат: число 2023
// имя_функции('ECMAScript 2022');     // Результат: число 2022
// имя_функции('1 кефир, 0.5 батона'); // Результат: число 105
// имя_функции('а я томат');           // Результат: NaN
// Если хотите усложнить задание, предусмотрите случай, когда вместо строки приходит число:

// имя_функции(2023); // Результат: число 2023
// имя_функции(-1);   // Результат: число 1
// имя_функции(1.5);  // Результат: число 15

const extractNumber = (string) => {
  let result = '';
  for (let i = 0; i < string.length; i++) {
    if (!Number.isNaN(parseInt(string.at(i), 10))) {
      result += string.at(i);
    }
  }
  return parseInt(result, 10);
};
extractNumber();
// Функция, которая принимает три параметра: исходную строку, минимальную длину и строку с добавочными символами — и возвращает исходную строку, дополненную указанными символами до заданной длины. Символы добавляются в начало строки. Если исходная строка превышает заданную длину, она не должна обрезаться. Если «добивка» слишком длинная, она обрезается с конца.

// Эта функция нам пригодится для формирования адресов файлов. Примеры её использования:

// // Добавочный символ использован один раз
// имя_функции('1', 2, '0');      // Результат: строка '01'

// // Добавочный символ использован три раза
// имя_функции('1', 4, '0');      // Результат: строка '0001'

// // Добавочные символы обрезаны с конца
// имя_функции('q', 4, 'werty');  // Результат: строка 'werq'

// // Добавочные символы использованы полтора раза
// имя_функции('q', 4, 'we');     // Результат: строка 'wweq'

// // Добавочные символы не использованы, исходная строка не изменена
// имя_функции('qwerty', 4, '0'); // Результат: строка 'qwerty'
// Попробуйте не использовать при этом функцию padStart() =)

const myPadStart = (string, minLength, pad) => {
  let result = string;
  while (result.length < minLength) {
    const newResultLength = result.length + pad.length;
    const actualPad = newResultLength <= minLength ? pad : pad.slice(0, minLength - newResultLength);
    result = actualPad + result;
  }
  return result;
};
myPadStart();
